

// mongoose.connect('mongodb://localhost/tracklist');


// //instantiate mongoose-gridfs
// var gridfs = require('mongoose-gridfs')({
//     collection: 'tracks',
//     model: 'song',
//     mongooseConnection: mongoose.connect
// });

// //obtain a model
// Song = gridfs.model;

// //create or save a file
// Song.write({
//         filename: 'sample.txt',
//         contentType: 'text/plain'
//     },
//     fs.createReadStream('/some/path/sample.txt'),
//     function(error, createdFile) {

//     });

// //for larger file size
// //read a file and receive a stream
// var stream = Song.readById();

// //for smaller file size
// //read a file and receive a buffer

// Song.readById(objectid, function(error, buffer) {

// });

// //remove file details and its content from gridfs
// Song.unlinkById(objectid, function(error, unlinkedAttachment) {

// });







1 -> form 
2 -> parse and designate individual IDs
3 -> stream these into individually into database, adding like items into documents together
4 -> show items in DB  
5 -> call items by id into the write/read stream 
6 -> hand to audio module to play on speakers 

 // if (req.url == '/upload' && req.method.toLowerCase() == 'post') {}

    // connection.on('error', console.error.bind(console, 'connection error:'));
    // connection.open(function(err, connection, req) {

    //     console.log("connection open");
    //     //  initialize stream 
    //     // gfs = Grid(connection);
    //     // // console.log(gfs.mongo);
    //     // /* 
    //     // console.logs to analyze gfs object and its args 
    //     // console.log(gfs.mongo);
    //     // console.log(".db ", connection.db.readPreference);
    //     // console.log(".mongoose ", connection.mongoose.readPreference);
    //     // console.log(".mongo ");
    //     // */
    //     // // name of our collection 
    //     // gfs.collection('podcasts');
    //     // // console.log();
    //     // console.log("post -> open");

    //     // // console.log(" req -> ", req);
    //     // // assuming you've already created a db instance and opened it
    //     // gridform.db = gfs.db;
    //     // gridform.mongo = gfs.mongo;

    //     // // create a gridform
    //     // var form = gridform();

    //     // // returns a custom IncomingForm
    //     // assert(form instanceof formidable.IncomingForm);

    //     // // optionally store per-file metadata
    //     // form.on('fileBegin', function(name, file) {
    //     //     file.metadata = 'so meta'
    //     // })

    //     // // parse normally
    //     // form.parse(req, function(err, fields, files) {
    //     //     // use files and fields as you do today
    //     //     var file = files.upload;
    //     //     file.name // the uploaded file name
    //     //     file.type // file type per [mime](https://github.com/bentomas/node-mime)
    //     //     file.size // uploaded file size (file length in GridFS) named "size" for compatibility
    //     //     file.path // same as file.name. included for compatibility
    //     //     file.lastModified // included for compatibility
    //     //         // files contain additional gridfs info
    //     //     file.root // the root of the files collection used in MongoDB ('fs' here means the full collection in mongo is named 'fs.files')
    //     //     file.id // the ObjectId for this file
    //     //     console.log("the file -->  " + file);
    //     // });
    //     // end of connection block 
    // })
